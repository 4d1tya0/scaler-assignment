[{"C:\\Users\\211ad\\Desktop\\ReactJS\\icp\\frontend\\src\\index.js":"1","C:\\Users\\211ad\\Desktop\\ReactJS\\icp\\frontend\\src\\App.js":"2","C:\\Users\\211ad\\Desktop\\ReactJS\\icp\\frontend\\src\\NavBar.js":"3","C:\\Users\\211ad\\Desktop\\ReactJS\\icp\\frontend\\src\\RescheduleInterview.js":"4","C:\\Users\\211ad\\Desktop\\ReactJS\\icp\\frontend\\src\\ScheduleInterview.js":"5","C:\\Users\\211ad\\Desktop\\ReactJS\\icp\\frontend\\src\\Home.js":"6","C:\\Users\\211ad\\Desktop\\ReactJS\\icp\\frontend\\src\\InterviewDetails.js":"7","C:\\Users\\211ad\\Desktop\\ReactJS\\icp\\frontend\\src\\config\\config.js":"8","C:\\Users\\211ad\\Desktop\\ReactJS\\icp\\frontend\\src\\InterviewList.js":"9","C:\\Users\\211ad\\Desktop\\ReactJS\\icp\\frontend\\src\\useFetch.js":"10"},{"size":432,"mtime":1665538936000,"results":"11","hashOfConfig":"12"},{"size":909,"mtime":1665588214000,"results":"13","hashOfConfig":"12"},{"size":351,"mtime":1665588860000,"results":"14","hashOfConfig":"12"},{"size":5031,"mtime":1665601403000,"results":"15","hashOfConfig":"12"},{"size":4026,"mtime":1665601390000,"results":"16","hashOfConfig":"12"},{"size":699,"mtime":1665594958000,"results":"17","hashOfConfig":"12"},{"size":1156,"mtime":1665587320000,"results":"18","hashOfConfig":"12"},{"size":85,"mtime":1665594920000,"results":"19","hashOfConfig":"12"},{"size":2100,"mtime":1665600431000,"results":"20","hashOfConfig":"12"},{"size":952,"mtime":1665595101000,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fmsr7c",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\211ad\\Desktop\\ReactJS\\icp\\frontend\\src\\index.js",[],"C:\\Users\\211ad\\Desktop\\ReactJS\\icp\\frontend\\src\\App.js",[],"C:\\Users\\211ad\\Desktop\\ReactJS\\icp\\frontend\\src\\NavBar.js",[],"C:\\Users\\211ad\\Desktop\\ReactJS\\icp\\frontend\\src\\RescheduleInterview.js",["44"],"import moment from \"moment\";\nimport { useState,useEffect } from \"react\";\nimport Select from \"react-select\";\nimport makeAnimated from \"react-select/animated\";\nimport { useHistory, useParams, useLocation } from \"react-router-dom\";\nimport Moment from \"react-moment\";\nimport { API_URL } from \"./config/config.js\";\n\nconst RescheduleInterview = () => {\n  const { uuid } = useParams();\n  console.log(uuid);\n  const location=useLocation();\n\n  let fetchParticipants=()=>{\n    let url=`${API_URL}/participants`\n    fetch(url)\n    .then((response) => response.json())\n    .then((data) =>{ \n      console.log(data);\n      setCandidateData(data)\n    });\n  }\n\nuseEffect(()=>{\n\n  fetchParticipants();\n\n},[])\n\n  const animatedComponents = makeAnimated();\n  const [date, setDate] = useState(new Date());\n  const [startTime, setStartTime] = useState(new Date());\n  const [endTime, setEndTime] = useState(new Date());\n  const [candidates, setCandidates] = useState([]);\n  const [candidateData, setCandidateData] = useState([]);\n\n  const [interviewers, setInterviewers] = useState([]);\n  const [isPending, setIsPending] = useState(false);\n  const history = useHistory();\n\n  const getOptions = (data) => {\n    console.log(data);\n    const options = [];\n    for (let d of data) {\n      options.push({ label: d.email, value: d.email });\n    }\n    return options;\n  };\n\n  const handleSubmit = (e) => {\n    setIsPending(true);\n    e.preventDefault();\n    const participants = [];\n    for (let interviewer of interviewers) {\n      participants.push(interviewer.value);\n    }\n    for (let candidate of candidates) {\n      participants.push(candidate.value);\n    }\n    const stime = moment(\n      `${date} ${startTime}`,\n      \"YYYY-MM-DD HH:mm:ss\"\n    ).format();\n    const etime = moment(`${date} ${endTime}`, \"YYYY-MM-DD HH:mm:ss\").format();\n    console.log(\"this is parti\", participants);\n    const interview = {\n      sTime: stime,\n      eTime: etime,\n      participants: participants,\n    };\n    console.log(interview);\n\n    fetch(`${API_URL}/meetings/reshedule/${uuid}`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(interview),\n    })\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        }\n        return res.text().then((text) => {\n          throw new Error(text);\n        });\n      })\n      .then((data) => {\n        console.log(data);\n        setIsPending(false);\n        console.log(\"Successfully updated interview\");\n        alert(\n          \"Successfully Rescheduled Interview!\"\n        );\n        history.push(\"/\");\n      })\n      .catch((err) => {\n        const data = JSON.parse(err.message);\n        alert(data.message);\n        setIsPending(false);\n        console.log(err);\n      });\n  };\n\n  return (\n    <div className=\"schedule\">\n      <h1>Reschedule interview</h1>\n      <h2>id: {uuid}</h2>\n      {\n      (\n        <div>\n          <div className=\"old-details\">\n            <h3>Current Details</h3>\n            <h4>\n              Date:{\" \"}\n              <Moment format=\"DD-MM-YYYY\">{location.state.startTime}</Moment>\n            </h4>\n            <h4>\n              Timings:{\" \"}\n              <Moment format=\"hh:mm A\">{location.state.startTime}</Moment> -{\" \"}\n              <Moment format=\"hh:mm A\">{location.state.endTime}</Moment>\n            </h4>\n            <h4>Participants</h4>\n            <ul>\n              {location.state.participants.map((participant, idx) => (\n                <li>{participant}</li>\n              ))}\n            </ul>\n          </div>\n          <form onSubmit={handleSubmit}>\n            <label>Reschedule Date : </label>\n            <input\n              type=\"date\"\n              required\n              value={date}\n              onChange={(e) => setDate(e.target.value)}\n            />\n            <label>Reschedule Start Time : </label>\n            <input\n              type=\"time\"\n              value={startTime}\n              required\n              onChange={(e) => setStartTime(e.target.value)}\n            />\n            <label>Rescheudle End Time : </label>\n            <input\n              type=\"time\"\n              value={endTime}\n              required\n              onChange={(e) => setEndTime(e.target.value)}\n            />\n            <label>Select Candidates : </label>\n            <Select\n              isMulti\n              closeMenuOnSelect={false}\n              components={animatedComponents}\n              name=\"candidates\"\n              options={getOptions(candidateData)}\n              className=\"basic-multi-select\"\n              classNamePrefix=\"select\"\n              onChange={(selectedOption) => {\n                setCandidates(selectedOption);\n                console.log(\"candidates selected\", selectedOption);\n              }}\n            />\n            {!isPending && <button>Rechedule Interview</button>}\n            {isPending && <button disabled>Rescheduling Interview...</button>}\n          </form>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default RescheduleInterview;\n","C:\\Users\\211ad\\Desktop\\ReactJS\\icp\\frontend\\src\\ScheduleInterview.js",["45"],"import moment from \"moment\";\nimport { useState ,useEffect} from \"react\";\nimport Select from \"react-select\";\nimport makeAnimated from \"react-select/animated\";\nimport { useHistory } from \"react-router-dom\";\nimport { API_URL } from \"./config/config.js\";\n\nconst ScheduleInterview = () => {\n\n\n  let fetchParticipants=()=>{\n    let url=`${API_URL}/participants`\n    fetch(url)\n    .then((response) => response.json())\n    .then((data) =>{ \n      console.log(data);\n      setCandidateData(data)\n    });\n  }\n\nuseEffect(()=>{\n\n  fetchParticipants();\n\n},[])\n\n  const animatedComponents = makeAnimated();\n  const [date, setDate] = useState(new Date());\n  const [startTime, setStartTime] = useState(new Date());\n  const [endTime, setEndTime] = useState(new Date());\n  const [candidates, setCandidates] = useState([]);\n  const [candidateData, setCandidateData] = useState([]);\n  const [interviewers, setInterviewers] = useState([]);\n  const [isPending, setIsPending] = useState(false);\n  const history = useHistory();\n\n  const getOptions = (data) => {\n    console.log(data);\n    const options = [];\n    for (let d of data) {\n      options.push({ label: d.email, value: d.email });\n    }\n    return options;\n  };\n\n  const handleSubmit = (e) => {\n    setIsPending(true);\n    e.preventDefault();\n    const participants = [];\n    for (let interviewer of interviewers) {\n      participants.push(interviewer.value);\n    }\n    for (let candidate of candidates) {\n      participants.push(candidate.value);\n    }\n    const stime = moment(\n      `${date} ${startTime}`,\n      \"YYYY-MM-DD HH:mm:ss\"\n    ).format();\n    const etime = moment(`${date} ${endTime}`, \"YYYY-MM-DD HH:mm:ss\").format();\n\n    const interview = {\n      sTime: stime,\n      eTime: etime,\n      participants: participants,\n    };\n    console.log(interview);\n\n    fetch(`${API_URL}/meetings`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(interview),\n    })\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        }\n        return res.text().then((text) => {\n          throw new Error(text);\n        });\n      })\n      .then((data) => {\n        console.log(data);\n        setIsPending(false);\n        console.log(\"Successfully added interview\");\n        alert(\n          \"Successfully scheduled interview!\"\n        );\n        history.push(\"/\");\n      })\n      .catch((err) => {\n        const data = JSON.parse(err.message);\n        alert(data.message);\n        setIsPending(false);\n        console.log(err);\n      });\n  };\n\n  return (\n    <div className=\"schedule\">\n      <h1>Schedule a new interview</h1>\n      <br></br>\n      {\n      (\n        <form onSubmit={handleSubmit}>\n          <label>Select Candidates : </label>\n          <Select\n            isMulti\n            closeMenuOnSelect={false}\n            components={animatedComponents}\n            name=\"candidates\"\n            options={getOptions(candidateData)}\n            className=\"basic-multi-select\"\n            classNamePrefix=\"select\"\n            onChange={(selectedOption) => {\n              setCandidates(selectedOption);\n              console.log(\"candidates selected\", selectedOption);\n            }}\n          />\n          <label>Choose Date : </label>\n          <input\n            type=\"date\"\n            required\n            value={date}\n            onChange={(e) => setDate(e.target.value)}\n          />\n          <label>Start Time : </label>\n          <input\n            type=\"time\"\n            value={startTime}\n            required\n            onChange={(e) => setStartTime(e.target.value)}\n          />\n          <label>End Time : </label>\n          <input\n            type=\"time\"\n            value={endTime}\n            required\n            onChange={(e) => setEndTime(e.target.value)}\n          />\n        \n          {!isPending && <button>Add Interview</button>}\n          {isPending && <button disabled>Adding Interview...</button>}\n        </form>\n      )}\n    </div>\n  );\n};\n\nexport default ScheduleInterview;\n","C:\\Users\\211ad\\Desktop\\ReactJS\\icp\\frontend\\src\\Home.js",[],"C:\\Users\\211ad\\Desktop\\ReactJS\\icp\\frontend\\src\\InterviewDetails.js",[],"C:\\Users\\211ad\\Desktop\\ReactJS\\icp\\frontend\\src\\config\\config.js",[],"C:\\Users\\211ad\\Desktop\\ReactJS\\icp\\frontend\\src\\InterviewList.js",[],"C:\\Users\\211ad\\Desktop\\ReactJS\\icp\\frontend\\src\\useFetch.js",[],{"ruleId":"46","severity":1,"message":"47","line":37,"column":24,"nodeType":"48","messageId":"49","endLine":37,"endColumn":39},{"ruleId":"46","severity":1,"message":"47","line":33,"column":24,"nodeType":"48","messageId":"49","endLine":33,"endColumn":39},"no-unused-vars","'setInterviewers' is assigned a value but never used.","Identifier","unusedVar"]